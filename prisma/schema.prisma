// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Post model represents individual blog posts
model Post {
  id        Int       @id @default(autoincrement())
  title     String
  content   String
}


model User {
  id          Int       @id @default(autoincrement())
  name        String
  age         Int
  gender      String
  email       String    @unique
  password    String
  supermarket String?
  createdAt   DateTime  @default(now())

  receipts    Receipt[] // 
  
// ADD THESE:
  sent     Friend[] @relation("SentRequests")
  received Friend[] @relation("ReceivedRequests")

avatar    Int?     //
}
model Receipt {
  id         Int            @id @default(autoincrement())
  supplier   String
  total      Float
  discounts  Float?         // NEW: optional discounts
  date       DateTime?      // NEW: actual receipt date
  imagePath  String?
  createdAt  DateTime       @default(now())
  user       User           @relation(fields: [userId], references: [id])
  userId     Int

  items      ReceiptItem[]  // NEW: linked items
}

model ReceiptItem {
  id         Int      @id @default(autoincrement())
  name       String
  category   String?
  price      Float
  receiptId  Int
  receipt Receipt @relation(fields: [receiptId], references: [id], onDelete: Cascade)
  
}
model Friend {
  id        Int      @id @default(autoincrement())
  userId    Int
  friendId  Int
  createdAt DateTime @default(now())

  user   User @relation("SentRequests", fields: [userId], references: [id])
  friend User @relation("ReceivedRequests", fields: [friendId], references: [id])

  @@unique([userId, friendId])
}
